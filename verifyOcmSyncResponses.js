const fs = require('fs');
const path = require('path');
const readline = require('readline');
const rl = readline.createInterface(process.stdin, process.stdout);

console.log('This tool can evaluate a directory of JSON files generated by ABAP report OFFLINE_SIMULATE_OCM_SYNC.');
console.log('This tool will verify existence of NodeID and ParentNodeID as well as uniqueness of NodeID per UICFilePath+ListPath.');

rl.question('Enter directory (relative or absolute path) which contains the JSON files to be checked: ', function (sDirectoryPath) {

    var mVerify = {};
    var iProcessedFiles = 0;
    var iTotalErrors = 0;

    fs.readdir(sDirectoryPath, function (err, files) {
        if (err) {
            throw new Error(err);
        }
        files.forEach(function (sFileName) {
            var sFilePath = path.join(sDirectoryPath, sFileName);
            var stat = fs.statSync(sFilePath);
            if (stat.isFile()) {
                var oJsonContent = JSON.parse(fs.readFileSync(sFilePath, 'utf8'));
                var aData = oJsonContent['Data'];
                var bErrorFound = false;
                if (aData && aData.length > 0) {
                    var sUICFilePath = oJsonContent.UICFilePath;
                    var sListPath = oJsonContent.ListPath;
                    var sUICFilePathListPath = sUICFilePath + sListPath;
                    if (mVerify[sUICFilePathListPath] === undefined) {
                        mVerify[sUICFilePathListPath] = {};
                    }
                    for (var i = 0; i < aData.length; i++) {
                        var oRecord = aData[i];
                        var sNodeID = undefined;
                        if (oRecord.hasOwnProperty('NodeID') === false) {
                            console.log('ERROR: file ' + sFileName);
                            console.log('ERROR: Missing Node ID');
                            console.log(oRecord);
                            iTotalErrors++;
                            bErrorFound = true;
                        } else {
                            sNodeID = oRecord['NodeID'];
                            if (sNodeID === null || sNodeID === '') {
                                console.log('ERROR: file ' + sFileName);
                                console.log('ERROR: Node ID is empty');
                                console.log(oRecord);
                                iTotalErrors++;
                                bErrorFound = true;
                            } else {
                                var mInstances = mVerify[sUICFilePathListPath];
                                if (mInstances[sNodeID] === sNodeID) {
                                    console.log('ERROR: file ' + sFileName);
                                    console.log('ERROR: duplicate Node ID');
                                    console.log(oRecord);
                                    iTotalErrors++;
                                    bErrorFound = true;
                                } else {
                                    mInstances[sNodeID] = sNodeID;
                                }

                            };
                        };
                        if (oRecord.hasOwnProperty('ParentNodeID') === false) {
                            console.log('ERROR: file ' + sFileName);
                            console.log('ERROR: Missing ParentNodeID');
                            console.log(oRecord);
                            iTotalErrors++;
                            bErrorFound = true;
                        } else {
                            if (oRecord['ParentNodeID'] === null || oRecord['ParentNodeID'] === '') {
                                console.log('ERROR: file ' + sFileName);
                                console.log('ERROR: ParentNodeID is empty');
                                console.log(oRecord);
                                iTotalErrors++;
                                bErrorFound = true;
                            };
                        }
                    }
                }
                if (bErrorFound === false) {
                    console.log('No errors found for file ' + sFileName);
                }
                iProcessedFiles++;
            } else {
                console.log(sFileName + ' is not a file');
            }
        });
        console.log('TOTAL: ' + iProcessedFiles + ' files processed');
        console.log('TOTAL: ' + iTotalErrors + ' errors found');
    });
   
    rl.close();
});


